---
layout: default
title: "Optimizing SQL Queries"
date: 2019-08-11
categories: blog
---
<div>
  <h2>Discovering the Issue</h2>

  <p>Before the first release of the tool, I wanted to provide some built-in queries accessible through the client UI out-of-the-box. While building those queries, I ran into an issue where some queries were exceeding the query time limits (even for administrator privileges!). Some queries were taking more than 30 seconds to return.</p>
  <!--
  <p>
  {% highlight ruby %}
    SELECT sample_id,md5,sha1,sha256,total,positives,list,filetype,submitted,user_id,username,downloads FROM
(SELECT filtered.sample_id,COUNT(filtered.download_id) AS downloads FROM
(SELECT DISTINCT ON (sample.id, downloadhistory) sample.id AS sample_id, downloadhistory.id AS download_id FROM
sample JOIN virustotal ON sample.id = virustotal.sample_id JOIN yaramatches ON sample.id = yaramatches.sample_id JOIN yararules ON yaramatches.rule_id = yararules.id LEFT JOIN downloadhistory ON sample.id = downloadhistory.sample_id
WHERE (virustotal.result ILIKE '%' || @parameter0|| '%' or yaramatches.name ILIKE '%' || @parameter1|| '%')) AS filtered
GROUP BY filtered.sample_id
) AS subquery JOIN sample ON subquery.sample_id = sample.id JOIN users ON sample.user_id = users.id
ORDER BY downloads DESC
LIMIT 50;
  {% endhighlight %}
  </p>
-->
</div>
